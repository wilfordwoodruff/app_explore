runApp('GitHub/Main-Data/_docs')
runApp('GitHub/Main-Data/_docs')
runApp('GitHub/Main-Data/_docs')
runApp('GitHub/Main-Data/_docs')
runApp('GitHub/Main-Data/_docs')
?textInput
runApp('GitHub/Main-Data/_docs')
?observeEvent
?debounce
runApp('GitHub/Main-Data/_docs')
runApp('GitHub/Consult_S23_WWP/Spencer/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/Spencer/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/Spencer/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/Spencer/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/Spencer/simple_shiny.R')
library(shiny); runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
library(ggplot2)
library(tibble)
data <- tibble(y=c(0,5,25,70,90),
x=c(1,2,3,4,5),
labels = c('Non-Data Major',
'Starting Data Science',
'Applying for Jobs',
'Learning about your Company',
'You Reading this!'))
ggplot(data,aes(x=x,y=y)) + geom_line() +
scale_x_continuous(breaks=data$labels)
data <- tibble(y=c(0,5,25,70,95,100),
x=c(1,2,3,4,5,6),
labels = c('Non-Data Major',
'Starting Data Science',
'Applying for Jobs',
'Learning about your Company',
'You Reading this!',
'Getting an Interview?'))
ggplot(data,aes(x=x,y=y)) + geom_line() #+
?scale_x_continuous
ggplot(data,aes(x=x,y=y)) + geom_line() +
scale_x_continuous(breaks=data$x,labels=data$labels)
?element_text
ggplot(data,aes(x=x,y=y)) + geom_line() +
scale_x_continuous(breaks=data$x,labels=data$labels)+
theme(
axis.text.x = element_text(angle=45)
)
ggplot(data,aes(x=x,y=y)) + geom_line() +
scale_x_continuous(breaks=data$x,labels=data$labels)+
theme_bw() +
theme(
axis.text.x = element_text(angle=45)
)
?element_text
ggplot(data,aes(x=x,y=y)) + geom_line(color='red') +
scale_x_continuous(breaks=data$x,labels=data$labels)+
theme_bw() +
labs(x='Time',
y='Interest',
title='Playing Hard to Get?') +
theme(
axis.text.x = element_text(angle=45)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red') +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),labels=c('0%',"25%",'50%',"75%","100%"))
ggplot(data,aes(x=x,y=y)) + geom_line(color='red') +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Playing Hard to Get?') +
theme(
axis.text.x = element_text(angle=45)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=2) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Playing Hard to Get?') +
theme(
axis.text.x = element_text(angle=45)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Playing Hard to Get?') +
theme(
axis.text.x = element_text(angle=45)
)
data <- tibble(y=c(0,5,25,70,95,100),
x=c(1,2,3,4,5,6),
labels = c('Non-Data Major',
'Starting Data Science',
'Applying for Jobs',
'Learning about\\nyour Company',
'You Reading this!',
'Getting an Interview?'))
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Playing Hard to Get?') +
theme(
axis.text.x = element_text(angle=45)
)
data <- tibble(y=c(0,5,25,70,95,100),
x=c(1,2,3,4,5,6),
labels = c('Non-Data Major',
'Starting Data Science',
'Applying for Jobs',
'Learning about\nyour Company',
'You Reading this!',
'Getting an Interview?'))
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Playing Hard to Get?') +
theme(
axis.text.x = element_text(angle=45)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=3)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,vjust=3)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='Interest',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1)
)
?theme
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='My Interest in your Company',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1),
panel.grid=element_blank()
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='My Interest in your Company',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1),
panel.grid=element_blank(),
axis.line.y = element_blank()
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='My Interest in your Company',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1),
panel.grid=element_blank(),
axis.line.y.left = element_blank()
)
?element_rect
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='My Interest in your Company',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1),
panel.grid=element_blank(),
axis.line.y.left = element_rect(fill=NULL)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='My Interest in your Company',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1),
panel.grid=element_blank(),
axis.line.y.left = element_line(linewidth=0)
)
data <- tibble(y=c(0,5,25,70,95,100),
x=c(1,2,3,4,5,6),
line_type = c(1,1,1,1,2),
labels = c('Non-Data Major',
'Starting Data Science',
'Looking for Internships',
'Learning about\nyour Company',
'You Reading this!',
'Getting an Interview?'))
data <- tibble(y=c(0,5,25,70,95,100),
x=c(1,2,3,4,5,6),
line_type = c(1,1,1,1,1,2),
labels = c('Non-Data Major',
'Starting Data Science',
'Looking for Internships',
'Learning about\nyour Company',
'You Reading this!',
'Getting an Interview?'))
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5,
lty=2) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='My Interest in your Company',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1),
panel.grid=element_blank(),
axis.line.y.left = element_line(linewidth=0)
)
ggplot(data,aes(x=x,y=y)) + geom_line(color='red',lwd=1.5,
lty=data$line_type) +
scale_x_continuous(breaks=data$x,labels=data$labels)+
scale_y_continuous(breaks=c(0,25,50,75,100),
labels=c('0%',"25%",'50%',"75%","100%")) +
theme_bw() +
labs(x='Time',
y='My Interest in your Company',
title='Don\'t Play Hard-to-Get') +
theme(
axis.text.x = element_text(angle=45,hjust=1),
panel.grid=element_blank(),
axis.line.y.left = element_line(linewidth=0)
)
clara_compiled <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/_docs/Clara_for_rshiny.csv')
library(tidyverse)
clara_compiled <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/_docs/Clara_for_rshiny.csv')
clara_compiled$point[[1]][1]
clara_compiled$point[[1]]
clara_compiled <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/clara_woodruff_timeline_map/main/data/final_data.csv') %>%
select(-c(point,state_url,text_transcript)) %>%
rename(state_url = city_url) %>%
rename(city_url = search_url) %>%
mutate(search_url=str_replace(str_extract(city_frequency,"^.*,"),',','')) #%>%
write_csv(select(clara_compiled,-c(city_frequency,state_url,city_url)),file="Clara_for_rshiny.csv")
clara_compiled <- read_csv('Clara_for_rshiny.csv')
clara_compiled <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/_docs/Clara_for_rshiny.csv')
library(shiny); runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
max(NA)
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
writings <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/data/derived/derived_data.csv') %>%
mutate(`First Date` = ymd(ifelse(is.na(`First Date`),substr(Dates,0,10),`First Date`)))
View(writings)
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
unique(writings$`Document Type`)
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
writings <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/data/derived/derived_data.csv') %>%
mutate(`First Date` = ymd(ifelse(is.na(`First Date`),substr(Dates,0,10),`First Date`)))
writings <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/data/derived/derived_data.csv') %>%
mutate(`First Date` = ymd(ifelse(is.na(`First Date`),substr(Dates,0,10),`First Date`)))
substr(writings$Dates,0,10)
arrange(substr(writings$Dates,0,10))
substr(writings$Dates,0,10) %>% filter(!is.na())
is.na(writings$`First Date`)
writings <- read_csv('https://github.com/wilfordwoodruff/Main-Data/raw/371f9cda2709a10c38735c5e7b5486384ebb3f65/data/derived/derived_data.csv') %>%
mutate(`First Date` = ymd(ifelse(is.na(`First Date`),substr(Dates,0,10),`First Date`)))
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
optinos("repos")
options("repos")
clara_compiled <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/_docs/Clara_for_rshiny.csv')
library(tidyverse)
clara_compiled <- read_csv('https://raw.githubusercontent.com/wilfordwoodruff/Main-Data/main/_docs/Clara_for_rshiny.csv')
View(clara_compiled)
library(shiny); runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
#library(DT)
library(leaflet)
?renderLeaflet
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
install.packages("leaflet")
install.packages("tidyverse")
library(shiny); runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
runApp('GitHub/Consult_S23_WWP/simpleapp/simple_shiny.R')
set.seed(122) #This ensures the randomness is the "same" everytime if you play the entire R-chunk as one entire piece of code. If you run lines separately, your data might not come out the same every time. You can pick any integer value you want for set.seed. Each choice produces a different sample, so you might want to play around with a few different choices.
## To begin, decide on your sample size. (You may have to revise it later to ensure all values in your lm(...) are significant.)
n <- 2000
## Then, create 10 X-variables using functions like rnorm(n, mean, sd), rchisq(n, df), rf(n, df1, df2), rt(n, df), rbeta(n, a, b), runif(n, a, b) or sample(c(1,0), n, replace=TRUE)... ## To see what any of these functions do, run codes like hist(rchisq(n, 3)). These functions are simply allowing you to get a random sample of x-values. But the way you choose your x-values can have quite an impact on what the final scatterplot of the data will look like.
x5 <- rnorm(n, mean=0, sd=1)/2.97 + 0.025
#x1 <- runif(n, -1.2, 0.7)
#x7 <- sample(seq(-10,10), n, replace=TRUE)
x7 <- runif(n, -10, 10)
# In order to use x2, you need to chage them, so if it is odd it will give you a 0, and if it's even it will give you a 1
x7_factor <- ifelse(round(x7)%%2==0, 1, 0)
x1 <- ifelse(x7_factor==1, 0, sample(c(0,1), n, replace=TRUE))
x4 <- sample(c(0,1), n, replace=TRUE) #replace this
x3 <- rnorm(n, mean=0, sd=1)/2 - 0.25
x6 <- sample(c(0,1), n, replace=TRUE) #replace this
x2 <- ifelse(x6==0, 0, sample(c(0,1), n, replace=TRUE)) #replace this
x8 <- rnorm(n, mean=0, sd=1)/4 - 0.5
x9 <- sample(c(0,rbeta(100, 0.25, 0.4)*10 - 6), n, replace=TRUE)
x10 <- ifelse(x1==0, 0, sample(c(0,1), n, replace=TRUE)) #replace this
## Then, create betas, sigma, normal error terms and y
# Linear
beta0 <- 3.9
beta1 <- -1.6
# Quadratic
beta2 <- -1.9
beta3 <- 1.1
beta4 <- 2.8
# Quartic
beta5 <- 2.8
beta6 <- 3.4
beta7 <- -5.8
beta8 <- 3
sigma <- 0.9 #change to whatever positive number you want
################################
# You ARE NOT ALLOWED to change this part:
epsilon_i <- rnorm(n, 0, sigma)
################################
#An example of how to make Y...
# y <-  beta0 + beta1*X1 + beta2*X2 + beta3*X4*X2 + epsilon_i
y <- beta0 + beta1*x5 +
beta2*x7_factor + beta3*x5*x7_factor + beta4*(x5^2)*x7_factor +
beta5*x1 + beta6*x5*x1 + beta7*(x5^2)*x1 + beta8*(x5^4)*x1 +
epsilon_i #...edit this code and replace it with your model. Don't forget the + epsilon_i!
## Now, you need to load your x-variables and y-variable
## into a data set.
# You can include Y' or X' instead of Y or X if you wish.
# Remember, only these functions are allowed when transforming
# variables: 1/Y^2, 1/Y, log(Y), sqrt(Y), sqrt(sqrt(Y)), Y^2, Y^3, 1/X^2, 1/X, log(X), sqrt(X), sqrt(sqrt(X)), X^2, X^3, X^4, X^5.
#########################################################
# ILLEGAL: Y = (beta0 + beta1*X5)^2 + epsilon_i #########
#########################################################
# Legal: sqrt(Y) = beta0 + beta1*X5^2 + epsilon_i #######
#########################################################
# You can only transform individual terms, not groups of terms.
# And the beta's cannot be part of the x-transformations.
# This loads your data into a data set:
rbdata <- data.frame(y, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10)
#Now fit your model to make sure it comes out significant:
mylm <- lm(y ~ x5 + # Linear
x7_factor + x5:x7_factor + I(x5^2):x7_factor + # Quadratic
x1 + x5:x1 + I(x5^2):x1 + I(x5^4):x1, # Quartic
data=rbdata)
summary(mylm)
#all p-values must be significant
#the R^2 value must be greater than or equal to 0.30.
# Once you are done with creating your model, and have successfully
# graphed it (see below), un-comment the following `write.csv` code,
# then, PLAY this ENTIRE R-chunk to write your data to a csv.
#write.csv(rbdata, "rbdata.csv", row.names=FALSE)
# The above code writes the dataset to your "current directory"
# To see where that is, use: getwd() in your Console.
# Find the rbdata.csv data set and upload it to I-Learn.
b <- coef(mylm)
palette(c("purple","green","red"))
plot(y ~ x5, data=rbdata, col=interaction(x7_factor,x1))
# Estimated Models
curve(b[1] + b[2]*x, lwd=2, col=palette()[1], add=TRUE)
curve((b[1] + b[3]) + (b[2] + b[5])*x + b[6]*x^2, col=palette()[2], add=TRUE)
curve((b[1] + b[4]) + (b[2] + b[7])*x + b[8]*x^2 + b[9]*x^4, col=palette()[3], lwd=2, add=TRUE)
# True Model
curve(beta0 + beta1*x, lwd=2, lty =2, col=palette()[1], add=TRUE)
curve((beta0 + beta2) + (beta1 + beta3)*x + beta4*x^2, lwd=2, lty =2, col=palette()[2], add=TRUE)
curve((beta0 + beta5) + (beta1 + beta6)*x + beta7*x^2 + beta8*x^4, lwd=2, lty =2, col=palette()[3], add=TRUE)
library(shiny); runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
library(tidyverse)
sand <- read_csv('C:/Users/spenc/Downloads/eternal_bliss.csv')
plot(y~x4,data=sand)
View(sand)
library(shiny); runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
?group_by
?groupby
filtered_writings <- read_csv('https://github.com/wilfordwoodruff/Main-Data/raw/371f9cda2709a10c38735c5e7b5486384ebb3f65/data/derived/derived_data.csv') %>%
mutate(`First Date` = ymd(ifelse(is.na(`First Date`),substr(Dates,0,10),`First Date`)))
freq_data <- filtered_writings %>% #L91, add selections
group_by(year(`First Date`)) %>%
summarise(count_words = sum(`Word Count`),
count_entries = n())
input <- tibble(word_search = "Joseph",startEndDate = c('1840-01-01','1890-01-01'),
journal_type = 'Journals')
filtered <- filtered_writings %<%
freq_data <- filtered %>% #L91, add selections
group_by(year(`First Date`)) %>%
summarise(count_words = sum(`Word Count`),
count_entries = n())
filtered <- filtered_writings %<%
filtered <- filtered_writings %<%
mutate(`Word Count`=str_count(`Text Only Transcript`,input$word_search)) %>%
filter(`Word Count` > 0 & `Document Type` %in% input$journal_type &
`First Date` > input$startEndDate[1] & `First Date` < input$startEndDate[2])
freq_data <- filtered %>% #L91, add selections
group_by(year(`First Date`)) %>%
summarise(count_words = sum(`Word Count`),
count_entries = n())
filtered <- filtered_writings %>%
mutate(`Word Count`=str_count(`Text Only Transcript`,input$word_search)) %>%
filter(`Word Count` > 0 & `Document Type` %in% input$journal_type &
`First Date` > input$startEndDate[1] & `First Date` < input$startEndDate[2])
input$word_search
input <- tibble(word_search = "Joseph",startEndDate = c('1840-01-01','1890-01-01'),
journal_type = 'Journals')
input$word_search
year(filtered_writings$`First Date`)
freq_data <- filtered_writings %>% #L91, add selections
group_by(year(`First Date`)) %>%
summarise(count_entries = n())
freq_data
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
group_by(filtered_writings,floor_date(as.numeric(year(`First Date`))))
filtered_writings$`First Date` %>%
year() %>%
as.numeric()
filtered_writings$`First Date` %>%
year() %>%
as.numeric() %>%
floor_date()
1834-1834%%10
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
?dateInput
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
?paste
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
?theme
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
runApp('GitHub/app_explore/simple_shiny.R')
library(shiny); runApp('GitHub/app_explore/simple_shiny.R')
library(shiny); runApp('GitHub/app_explore/app/simple_shiny.R')
library(shiny); runApp('Old Classes/no_map.R')
install.packages(c("alphavantager", "blob", "broom", "bslib", "cachem", "car", "cli", "clock", "commonmark", "curl", "dbplyr", "DEoptimR", "deSolve", "dplyr", "DT", "dtplyr", "evaluate", "fda", "FNN", "fontawesome", "fs", "future.apply", "gapminder", "gargle", "geometries", "ggformula", "ggplot2", "googledrive", "googlesheets4", "gtable", "hardhat", "hms", "htmltools", "htmlwidgets", "httpuv", "httr2", "insight", "ipred", "jsonlite", "knitr", "labelled", "Lahman", "later", "lattice", "lme4", "locfit", "maptools", "markdown", "Matrix", "modelr", "mvtnorm", "parallelly", "pkgbuild", "plotly", "processx", "prodlim", "ps", "quantmod", "quantreg", "RcppArmadillo", "RCurl", "recipes", "rmarkdown", "robustbase", "rrcov", "s2", "sass", "scatterplot3d", "sf", "sfheaders", "SnowballC", "sp", "styler", "survey", "terra", "testthat", "tibble", "tidyquant", "timetk", "tinytex", "tseries", "tzdb", "units", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xts", "zip", "zoo"))
install.packages(c("alphavantager", "blob", "broom", "bslib", "cachem", "car", "cli", "clock", "commonmark", "curl", "dbplyr", "DEoptimR", "deSolve", "dplyr", "DT", "dtplyr", "evaluate", "fda", "FNN", "fontawesome", "fs", "future.apply", "gapminder", "gargle", "geometries", "ggformula", "ggplot2", "googledrive", "googlesheets4", "gtable", "hardhat", "hms", "htmltools", "htmlwidgets", "httpuv", "httr2", "insight", "ipred", "jsonlite", "knitr", "labelled", "Lahman", "later", "lattice", "lme4", "locfit", "maptools", "markdown", "Matrix", "modelr", "mvtnorm", "parallelly", "pkgbuild", "plotly", "processx", "prodlim", "ps", "quantmod", "quantreg", "RcppArmadillo", "RCurl", "recipes", "rmarkdown", "robustbase", "rrcov", "s2", "sass", "scatterplot3d", "sf", "sfheaders", "SnowballC", "sp", "styler", "survey", "terra", "testthat", "tibble", "tidyquant", "timetk", "tinytex", "tseries", "tzdb", "units", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xts", "zip", "zoo"))
install.packages(c("alphavantager", "blob", "broom", "bslib", "cachem", "car", "cli", "clock", "commonmark", "curl", "dbplyr", "DEoptimR", "deSolve", "dplyr", "DT", "dtplyr", "evaluate", "fda", "FNN", "fontawesome", "fs", "future.apply", "gapminder", "gargle", "geometries", "ggformula", "ggplot2", "googledrive", "googlesheets4", "gtable", "hardhat", "hms", "htmltools", "htmlwidgets", "httpuv", "httr2", "insight", "ipred", "jsonlite", "knitr", "labelled", "Lahman", "later", "lattice", "lme4", "locfit", "maptools", "markdown", "Matrix", "modelr", "mvtnorm", "parallelly", "pkgbuild", "plotly", "processx", "prodlim", "ps", "quantmod", "quantreg", "RcppArmadillo", "RCurl", "recipes", "rmarkdown", "robustbase", "rrcov", "s2", "sass", "scatterplot3d", "sf", "sfheaders", "SnowballC", "sp", "styler", "survey", "terra", "testthat", "tibble", "tidyquant", "timetk", "tinytex", "tseries", "tzdb", "units", "usethis", "vctrs", "viridis", "viridisLite", "vroom", "waldo", "wk", "xfun", "xts", "zip", "zoo"))
rsconnect::appDependencies()
$repos
rsconnect::appDependencies()
setwd("~/GitHub/app_explore/app")
rsconnect::appDependencies()
